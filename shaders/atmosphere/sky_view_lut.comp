#version 450

float SUN_TRANSMITTANCE_STEP  = 40.0;

#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout (binding = 0)uniform AtmosphereParam
{
    vec4 transSkyLUTRes;
    vec3 rayleighScatteringBase;
    float rayleighScaleHeight;
    float groundRadiusMM;
    float atmosphereRadiusMM;
    float iTime;
}atmos;

layout (binding = 1) uniform sampler2D transmittanceLUT;

layout (binding = 2, rgba16f) uniform image2D skyViewLut;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const int numScatteringSteps = 32;

vec3 raymarchScattering(vec3 pos, 
                        vec3 rayDir, 
                        vec3 sunDir,
                        float tMax,
                        float numSteps)
{
    float cosTheta = dot(rayDir, sunDir);
    
	//float miePhaseValue = getMiePhase(cosTheta);
	float rayleighPhaseValue = getRayleighPhase(-cosTheta);
    
    vec3 lum = vec3(0.0);
    vec3 transmittance = vec3(1.0);
    float t = 0.0;
    for (float i = 0.0; i < numSteps; i += 1.0) {
        float newT = ((i + 0.3)/numSteps)*tMax;
        float dt = newT - t;
        t = newT;
        
        vec3 newPos = pos + t*rayDir;
        
        vec3 rayleighScattering, extinction;
        float mieScattering;
        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);
        
        vec3 sampleTransmittance = exp(-dt*extinction);

        vec3 sunTransmittance = getValFromTLUT(transmittanceLUT, newPos, sunDir);
        //vec3 psiMS = getValFromMultiScattLUT(iChannel1, iChannelResolution[1].xy, newPos, sunDir);
        vec3 psiMS = vec3(0.0);
        
        vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
        //vec3 mieInScattering = mieScattering*(miePhaseValue*sunTransmittance + psiMS);
        //vec3 inScattering = (rayleighInScattering + mieInScattering);

        vec3 inScattering = rayleighInScattering;

        // Integrated scattering within path segment.
        vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;

        lum += scatteringIntegral * transmittance;
         //lum =vec3(sunTransmittance);
        
        transmittance *= sampleTransmittance;
    }
    
    return lum;
}

void main()
{
    ivec2 scrpos = ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y);

    vec2 skyLutRes = atmos.transSkyLUTRes.zw;

    vec2 uv = vec2(float(scrpos.x),float(scrpos.y))/skyLutRes;

    uv.y = 1.0 - uv.y;

    float azimuthAngle = (uv.x - 0.5)*2.0*PI;
    // Non-linear mapping of altitude. See Section 5.3 of the paper.
    float adjV;
    if (uv.y < 0.5) {
		float coord = 1.0 - 2.0*uv.y;
		adjV = -coord*coord;
	} else {
		float coord = uv.y*2.0 - 1.0;
		adjV = coord*coord;
	}

    float height = length(viewPos);
    vec3 up = viewPos / height;
    float horizonAngle = safeAcos(sqrt(height * height - atmos.groundRadiusMM * atmos.groundRadiusMM) / height) - 0.5*PI;
    float altitudeAngle = adjV*0.5*PI - horizonAngle;
    
    float cosAltitude = cos(altitudeAngle);

    //azimuth 方位角theta altitude天顶角 cosAltitude 向量在xz平面投影
    
    vec3 rayDir = vec3(cosAltitude*sin(azimuthAngle), sin(altitudeAngle), -cosAltitude*cos(azimuthAngle));
    
    float sunAltitude = (0.5*PI) - acos(dot(getSunDir(atmos.iTime), up));
    vec3 sunDir = vec3(0.0, sin(sunAltitude), -cos(sunAltitude));
    
    float atmoDist = rayIntersectSphere(viewPos, rayDir, atmos.atmosphereRadiusMM);
    float groundDist = rayIntersectSphere(viewPos, rayDir, atmos.groundRadiusMM);
    float tMax = (groundDist < 0.0) ? atmoDist : groundDist;
    vec3 lum = raymarchScattering(viewPos, rayDir, sunDir, tMax, 32.0);

    //lum = vec3(tMax);
    imageStore(skyViewLut,scrpos,vec4(lum, 0.0));
}